from django.db import models
import uuid
from datetime import datetime
from django.utils.text import slugify
from gdstorage.storage import GoogleDriveStorage

# Define Google Drive Storage
gd_storage = GoogleDriveStorage()

# Create your models here.
class Promotion(models.Model):
    PROMO_TARGET = [
        ('product', 'product'),
        ('category', 'category'),
        ('shipping', 'shipping'),
        ('payment', 'payment'),
        ('all', 'all'),
    ]

    PROMO_TYPES = [
        ('percent', 'percent'),
        ('nxm', 'nxm'),
        ('free', 'free'),
        ('code', 'code'),
    ]
    
    target = models.CharField(choices=PROMO_TARGET, max_length=20)
    _type = models.CharField(choices=PROMO_TYPES, max_length=20)
    code = models.CharField(max_length=20)
    text = models.CharField(max_length=200)
    is_active = models.BooleanField(default=False)

    def __str__(self):
        return f'{self.target} ({self._type}): {self.code} ({self.is_active})'

class Category(models.Model):
    name = models.CharField(max_length=50, unique=True)
    is_active = models.BooleanField(default=True)
    message = models.CharField(max_length=200, default='', blank=True)
    orden = models.IntegerField(default=1)

    def __str__(self):
        return self.name.capitalize()
    
    def slug(self):
        return slugify(self.name)

    def save(self, *args, **kwargs):
        '''
            Save the name of category in lowercase.
        '''
        self.name = self.name.lower()
        super(Category, self).save(*args, **kwargs)

class Product(models.Model):
    '''
        A model for products.

        Parameters:
        -----------
        id: Integer autogenerated.
        title: ChardField
        stock: Positive Integer
        created_at: DataTimeField auto_now_add:True
        price: FloatField
    '''
    title = models.CharField('Product', max_length=150)
    description = models.TextField('Description', max_length=400, blank=True)
    stock = models.PositiveSmallIntegerField(default=0)
    available_stock = models.PositiveSmallIntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    price = models.FloatField(default=0)
    is_active = models.BooleanField(default=True)
    new_enabled = models.BooleanField(default=True)
    category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name='products')
    promotions = models.ManyToManyField(Promotion, related_name='products', blank=True)

    def check_available_stock(self, quantity):
        return (self.available_stock > 0) and (self.available_stock >= quantity)

    def set_available_stock(self, quantity):
        self.available_stock -= quantity
        self.save()

    def update_stock(self):
        self.stock = self.available_stock
        self.save()

    def release_stock(self):
        self.available_stock = self.stock
        self.save()

    def __str__(self):
        return f"{self.title}: {self.price}"
    
    def is_new(self):
        '''
            Check if the product is new.
        '''
        # Define a week to consider a product new
        TIME_TO_BE_NEW = 7*24*3600
        # Get the actual time
        t_now = datetime.now(tz=self.created_at.tzinfo)
        # Check the token time less than hour
        dt = t_now - self.created_at
        # Return True if the product is new and new_enable is True, otherwise False.
        return (dt.total_seconds() <= TIME_TO_BE_NEW) if self.new_enabled else False

    def has_stock(self):
        return self.stock > 0

    def slug(self):
        return slugify(self.title)

class ProductImages(models.Model):

    '''
        A model for images of products.

        Parameters:
        -----------
        product: ForeignKey to Product Model.
        image: ImageField
        uploaded_at: DataTimeField auto_now_add:True

        Methods:
        -------
        The method save() is override to change the name of image file and 
        avoid maliciuos actions.
    '''

    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='images')
    image = models.ImageField(upload_to="products/", storage=gd_storage)
    uploaded_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.image.url}"
    
    def save(self, *args, **kwargs):
        '''
            Change the name of file to uuid.
        '''
        # Get the file extension
        extension = '.' + self.image.name.split('.')[-1]
        # Change the name of image
        self.image.name = '/'.join([str(self.product.id), str(uuid.uuid4().hex + extension)])
        super(ProductImages, self).save(*args, **kwargs)

class Place(models.Model):
    name = models.CharField(max_length=30)
    surname = models.CharField(max_length=30)
    email = models.EmailField()
    phone_number = models.CharField(max_length=25)
    logo = models.ImageField(upload_to='owner/%Y/%m/%d', storage=gd_storage)
    instagram = models.URLField()
    whatsapp = models.URLField()
    cbu = models.CharField(max_length=30)
    alias_CBU = models.CharField(max_length=50)
    cuil = models.CharField(max_length=11)
    cuenta = models.CharField(max_length=50)
    banco = models.CharField(max_length=50)

    def __str__(self):
        return self.name

    def get_phone(self):
        return f'+{self.phone_number}'

